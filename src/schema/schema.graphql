# Here create your Schema
type Query {
	accountLogIn(user: LogInInput!): SessionInfo!
	getFlashCards(token: String!): [FCard!]!
	getOneFlashCard(fcard: OneFlashCard!): FCard!
}

type Mutation {
	createUser(user: UserInput!): accountCreationData!
	createFCard(fcard: FcardInput): fcardCreationData!
	editFCard(fcard: FCardUpdateInput): fcardEditionData!
	deleteFCard(fcard: FCardDeleteInput): fcardDeletionData!
}

input OneFlashCard {
	_id: ID!
	token: String!
}

input UserInput {
	userName: String!
	email: String!
	password: String!
}

input LogInInput {
	email: String!
	password: String!
}

input FcardInput {
	title: String!
	content: String!
	token: String!
}

input FCardUpdateInput {
	_id: ID!
	token: String!
	title: String!
	content: String!
}

input FCardDeleteInput {
	_id: ID!
	token: String!
}

type FCard {
	id: ID!
	title: String!
	content: String!
	author: userEmail!
	createdAt: String!
	updatedAt: String!
}

type User {
	id: ID!
	userName: String!
	email: String!
	password: String!
	createdAt: String!
	updatedAt: String!
}

type SessionInfo {
	userId: ID!
	token: String!
	tokenExpiration: Int!
	err: Error
}

type accountCreationData {
  hasCreated: Boolean!
  err: Error
}

type fcardEditionData {
	FCardHasEdited: Boolean!
	err: Error
}

type fcardCreationData {
  FCardHasCreated: Boolean!
  err: Error
}

type fcardDeletionData {
  FCardHasDeleted: Boolean!
  err: Error
}

type Error {
	errorCode: Int!
	errorDesc: String!
}

scalar userEmail